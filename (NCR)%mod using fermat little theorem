ll mod=1e9+7;
void factorial()
{
    fact[0]=fact[1]=1;
    for(int i=2;i<N;i++)
    {
          fact[i]=(fact[i-1]*i)%mod;
    }
}
ll binmultiply(ll a,ll b)
{
     ll ans=0;
     while(b)
     {
          if(b&1)
          ans=(ans+a)%mod;
          
          a=(a+a)%mod;
          b>>=1;
     }
     return ans;
}

//HAD TO BE USED ONLY WHEN MOD IS GREATER THAN 1e9;(HEAVY TIME COMPLEXITY)
ll binwithmod2(ll a,ll b)
{
     a%=mod;
     ll ans=1;
     while(b)
     {
          if(b&1)
          ans=binmultiply(ans,a);
          
          a=binmultiply(a,a);
          b>>=1;
     }
     return ans;
}

//CHEAP TIME COMPLEXITY
ll binwithmod1(ll a,ll b)
{
     a%=mod;
     ll ans=1;
     while(b)
     {
          if(b&1)
          ans=(ans*a)%mod;
          a=(a*a)%mod;
          b>>=1;
     }
     return ans;
}

ll inverse(ll n)
{
     ll ans=binwithmod1(n,mod-2);
     return ans;
}
ll NCR(ll n,ll r)
{
    if(n<r)
    return 0;

    if(r==0)
    return 1;

    ll ans=(fact[n] * inverse(fact[r]) % mod
            * inverse(fact[n - r]) % mod)
           % mod;
           
    return ans;
}
